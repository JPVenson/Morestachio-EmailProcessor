<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Application.Header.Title" xml:space="preserve">
    <value>Mail Processor</value>
  </data>
  <data name="Application.Navigation.Back" xml:space="preserve">
    <value>Back</value>
  </data>
  <data name="Application.Navigation.Forward" xml:space="preserve">
    <value>Next</value>
  </data>
  <data name="DataImport.Strategy.CSV.FileName" xml:space="preserve">
    <value>File Name</value>
  </data>
  <data name="DataImport.PrepareStep.AddressPath" xml:space="preserve">
    <value>Address Expression</value>
  </data>
  <data name="DataImport.PrepareStep.NamePath" xml:space="preserve">
    <value>Name Expression</value>
  </data>
  <data name="DataImport.PrepareStep.SubjectPath" xml:space="preserve">
    <value>Subject Expression</value>
  </data>
  <data name="DataImport.Selector.SelectTitle" xml:space="preserve">
    <value>Select Data Source</value>
  </data>
  <data name="MailDistributor.Selector.SelectTitle" xml:space="preserve">
    <value>Select Send Method</value>
  </data>
  <data name="MailDistributor.Strategy.ToDirectory.DirectoryPath" xml:space="preserve">
    <value>Output Path</value>
  </data>
  <data name="Welcome.Title" xml:space="preserve">
    <value>Welcome to the Mail Processor</value>
  </data>
  <data name="Welcome.Content" xml:space="preserve">
    <value>Lorem Ipsum</value>
  </data>
  <data name="DataImport.Selector.Title" xml:space="preserve">
    <value>Data Source</value>
  </data>
  <data name="Close.Title" xml:space="preserve">
    <value>End</value>
  </data>
  <data name="Summery.Title" xml:space="preserve">
    <value>Send</value>
  </data>
  <data name="Template.Title" xml:space="preserve">
    <value>Template</value>
  </data>
  <data name="WelcomeStep.Title" xml:space="preserve">
    <value>Start</value>
  </data>
  <data name="DataImport.Strategy.CSV.Title" xml:space="preserve">
    <value>CSV import</value>
  </data>
  <data name="DataImport.Strategy.CSV.Name" xml:space="preserve">
    <value>Import from CSV</value>
  </data>
  <data name="Template.Errors.InvalidTemplate" xml:space="preserve">
    <value>Error in Template</value>
  </data>
  <data name="DataImport.Strategy.CSV.Errors.InvalidPath" xml:space="preserve">
    <value>The path to the CSV file is not valid</value>
  </data>
  <data name="DataImport.Strategy.CSV.Errors.InvalidFile" xml:space="preserve">
    <value>The contents of the file did not indicate a CSV file</value>
  </data>
  <data name="DataImport.PrepareStep.Errors.InvalidExpression" xml:space="preserve">
    <value>The expression is Invalid</value>
  </data>
  <data name="MailDistributor.Prepare.Title" xml:space="preserve">
    <value>Prepare Data</value>
  </data>
  <data name="MailDistributor.Strategy.ToDirectory.Errors.InvalidDirectory" xml:space="preserve">
    <value>The path leads to no valid directory</value>
  </data>
  <data name="MailDistributor.Strategy.ToDirectory.Title" xml:space="preserve">
    <value>Mime to Directory</value>
  </data>
  <data name="MailDistributor.Strategy.ToDirectory.Name" xml:space="preserve">
    <value>Save in Directory</value>
  </data>
  <data name="MailDistributor.Selector.Title" xml:space="preserve">
    <value>Send Method</value>
  </data>
  <data name="Summery.Fields.ImportFrom" xml:space="preserve">
    <value>Import Using</value>
  </data>
  <data name="Summery.Fields.UseAddress" xml:space="preserve">
    <value>Get address by calling</value>
  </data>
  <data name="Summery.Fields.UseName" xml:space="preserve">
    <value>Get name by calling</value>
  </data>
  <data name="Summery.Fields.SendVia" xml:space="preserve">
    <value>Send mail via</value>
  </data>
  <data name="Summery.Fields.GenerateAndSendParallel" xml:space="preserve">
    <value>Generate and send in Parallel</value>
  </data>
  <data name="DataImport.PrepareStep.Header.Field" xml:space="preserve">
    <value>Field</value>
  </data>
  <data name="DataImport.PrepareStep.Header.Expression" xml:space="preserve">
    <value>Expression</value>
  </data>
  <data name="DataImport.PrepareStep.Header.ExampleData" xml:space="preserve">
    <value>Example Output</value>
  </data>
  <data name="Application.Header.Close" xml:space="preserve">
    <value>Exit</value>
  </data>
  <data name="Application.Header.StartSend" xml:space="preserve">
    <value>Send!</value>
  </data>
  <data name="Summery.Fields.Progress" xml:space="preserve">
    <value>Progress</value>
  </data>
  <data name="Summery.Fields.UseSubject" xml:space="preserve">
    <value>Get subject line by calling</value>
  </data>
  <data name="Summery.Fields.NoOfParallism" xml:space="preserve">
    <value>Threads for Sending</value>
  </data>
  <data name="Summery.Fields.ParallelReadAheadCount" xml:space="preserve">
    <value>Number of Mails put in Memory</value>
  </data>
  <data name="Summery.Result.Title" xml:space="preserve">
    <value>Result</value>
  </data>
  <data name="Summery.Fields.Progress.ProcessedNumber" xml:space="preserve">
    <value>Processed Mails</value>
  </data>
  <data name="Summery.Fields.Progress.Failed" xml:space="preserve">
    <value>Failed to Send or Create</value>
  </data>
  <data name="Summery.Fields.Progress.Success" xml:space="preserve">
    <value>Send Mails</value>
  </data>
  <data name="Summery.Commands.Reset" xml:space="preserve">
    <value>Reset</value>
  </data>
  <data name="SendReport.Save.Title" xml:space="preserve">
    <value>Save to File</value>
  </data>
  <data name="SendReport.Refresh.Title" xml:space="preserve">
    <value>Refresh Report</value>
  </data>
  <data name="SaveReport.Title" xml:space="preserve">
    <value>Send Report</value>
  </data>
  <data name="Summery.Commands.Report" xml:space="preserve">
    <value>Send Report</value>
  </data>
  <data name="Help.Title" xml:space="preserve">
    <value>Help</value>
  </data>
  <data name="DataImport.Selector.Description" xml:space="preserve">
    <value>Please select from where the data should be obtained to generate the contents of the mails</value>
  </data>
  <data name="Summery.Description" xml:space="preserve">
    <value>Please review all your settings and if deemed ok, use the "Send" button to start generating and sending your E-Mails via the set Distributor. 

You can also enable parallel processing, this is useful when processing a large number of mails but not all Distributors may support this. 

Also please note that this will possibly take a large portion of your decices power to send the mails.</value>
  </data>
  <data name="Template.Description" xml:space="preserve">
    <value>This is where you set your Morestachio template.</value>
  </data>
  <data name="WelcomeStep.Description" xml:space="preserve">
    <value>This help bar will give you contextual help when used in any following step</value>
  </data>
  <data name="DataImport.Strategy.CSV.Description" xml:space="preserve">
    <value>This imports the data for Mail generation from an CSV file using ; as a seperator</value>
  </data>
  <data name="MailDistributor.Prepare.Description" xml:space="preserve">
    <value>In this step you have to set several expressions that will be used to extract the direct mailing related properties of your data. For more information on Morestachio Expressions please visit: </value>
  </data>
  <data name="MailDistributor.Strategy.ToDirectory.Description" xml:space="preserve">
    <value>This strategy will save each generated mail in the set directory as an .mime file</value>
  </data>
  <data name="SaveReport.Description" xml:space="preserve">
    <value>Here you can see a report of the send out mails including a detailed list of mails that could not been send and the reason for it</value>
  </data>
  <data name="CloseStep.Title" xml:space="preserve">
    <value>All mails Processed</value>
  </data>
  <data name="CloseStep.Content" xml:space="preserve">
    <value>Your processing is done and you can now close the application whoever you like</value>
  </data>
  <data name="MailDistributor.Strategy.Smtp.Title" xml:space="preserve">
    <value>Smtp</value>
  </data>
  <data name="MailDistributor.Strategy.Smtp.Description" xml:space="preserve">
    <value>This distributor sends generated mails via an smtp server. It will connect to the given host by using the set port. You have to validate your settings before you can continue.</value>
  </data>
  <data name="MailDistributor.Strategy.Smtp.Name" xml:space="preserve">
    <value>SMTP server</value>
  </data>
  <data name="MailDistributor.Strategy.Smtp.Errors.NoPassword" xml:space="preserve">
    <value>No Password</value>
  </data>
  <data name="MailDistributor.Strategy.Smtp.Errors.NoUsername" xml:space="preserve">
    <value>No Username</value>
  </data>
  <data name="MailDistributor.Strategy.Smtp.Errors.NoHost" xml:space="preserve">
    <value>No Host</value>
  </data>
  <data name="MailDistributor.Strategy.Smtp.Errors.InvalidHost" xml:space="preserve">
    <value>The given text does not seem to be a valid Uri</value>
  </data>
  <data name="MailDistributor.Strategy.Smtp.Errors.InvalidPort" xml:space="preserve">
    <value>The Port must be in the range of 1 to 65556. Default is 587</value>
  </data>
  <data name="MailDistributor.Strategy.Smtp.Validate.Title" xml:space="preserve">
    <value>Validate</value>
  </data>
  <data name="MailDistributor.Strategy.Smtp.Fields.Host" xml:space="preserve">
    <value>Host</value>
  </data>
  <data name="MailDistributor.Strategy.Smtp.Fields.Port" xml:space="preserve">
    <value>Port</value>
  </data>
  <data name="MailDistributor.Strategy.Smtp.Fields.Username" xml:space="preserve">
    <value>Username</value>
  </data>
  <data name="MailDistributor.Strategy.Smtp.Fields.Password" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="MailDistributor.Strategy.Smtp.Fields.ValidationResult" xml:space="preserve">
    <value>Validation Result</value>
  </data>
  <data name="DataImport.PrepareStep.FromAddressPath" xml:space="preserve">
    <value>From Address Expression</value>
  </data>
  <data name="DataImport.PrepareStep.FromNamePath" xml:space="preserve">
    <value>From Name Expression</value>
  </data>
  <data name="Application.Navigation.Close.Title" xml:space="preserve">
    <value>Closing {Application.Header.Title}</value>
  </data>
  <data name="Application.Navigation.Close.Message" xml:space="preserve">
    <value>Do you want to close the {Application.Header.Title}?. You will lose all entered Data.</value>
  </data>
  <data name="Application.Error.Title" xml:space="preserve">
    <value>There has been an Error</value>
  </data>
  <data name="Summery.Error.Message" xml:space="preserve">
    <value>While generating mails there has been an unrecoverable error.

The Error message is as Follows:
{0}</value>
  </data>
  <data name="DataImport.PrepareStep.Errors.InvalidAddress" xml:space="preserve">
    <value>The input value does not indicate a valid mail address</value>
  </data>
</root>